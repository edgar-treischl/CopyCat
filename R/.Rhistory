se=FALSE,
fullrange=TRUE) +
scale_color_PR()+
theme_PR()
#PR THEME
theme_PR <- function(...){
font_add_google("Roboto", "roboto")
showtext_auto()
theme_set(theme_dark())
theme(
text = element_text(family = "roboto", size = 8, color = "black"),
plot.title = element_text(family = "roboto", size = 15,
face = "bold", color="#2a475e"),
axis.line = element_line(colour = "grey50"),
plot.background = element_rect(fill = '#fbf9f4', color = '#fbf9f4')
)
}
#Plot testing
ggplot(dat, aes(x=xvar, y=yvar, color=cond)) +
geom_point(shape=1) +
scale_colour_hue(l=50) +
geom_smooth(method=lm,
se=FALSE,
fullrange=TRUE) +
scale_color_PR()+
theme_PR()
#PR THEME
theme_PR <- function(...){
font_add_google("Roboto", "roboto")
showtext_auto()
theme_set(theme_minmal())
theme(
text = element_text(family = "roboto", size = 8, color = "black"),
plot.title = element_text(family = "roboto", size = 15,
face = "bold", color="#2a475e"),
axis.line = element_line(colour = "grey50"),
plot.background = element_rect(fill = '#fbf9f4', color = '#fbf9f4')
)
}
#Plot testing
ggplot(dat, aes(x=xvar, y=yvar, color=cond)) +
geom_point(shape=1) +
scale_colour_hue(l=50) +
geom_smooth(method=lm,
se=FALSE,
fullrange=TRUE) +
scale_color_PR()+
theme_PR()
#PR THEME
theme_PR <- function(...){
font_add_google("Roboto", "roboto")
showtext_auto()
theme_set(theme_minmal())
theme(
text = element_text(family = "roboto", size = 8, color = "black"),
plot.title = element_text(family = "roboto", size = 15,
face = "bold", color="#2a475e"),
axis.line = element_line(colour = "grey50"),
plot.background = element_rect(fill = '#fbf9f4', color = '#fbf9f4')
)
}
#Plot testing
ggplot(dat, aes(x=xvar, y=yvar, color=cond)) +
geom_point(shape=1) +
scale_colour_hue(l=50) +
geom_smooth(method=lm,
se=FALSE,
fullrange=TRUE) +
scale_color_PR()+
theme_PR()
#PR THEME
theme_PR <- function(...){
font_add_google("Roboto", "roboto")
showtext_auto()
theme_set(theme_minimal())
theme(
text = element_text(family = "roboto", size = 8, color = "black"),
plot.title = element_text(family = "roboto", size = 15,
face = "bold", color="#2a475e"),
axis.line = element_line(colour = "grey50"),
plot.background = element_rect(fill = '#fbf9f4', color = '#fbf9f4')
)
}
#Plot testing
ggplot(dat, aes(x=xvar, y=yvar, color=cond)) +
geom_point(shape=1) +
scale_colour_hue(l=50) +
geom_smooth(method=lm,
se=FALSE,
fullrange=TRUE) +
scale_color_PR()+
theme_PR()
dat1 <- data.frame(
sex = factor(c("Female","Female","Male","Male")),
time = factor(c("Lunch","Dinner","Lunch","Dinner"), levels=c("Lunch","Dinner")),
total_bill = c(13.53, 16.81, 16.24, 17.42)
)
dat1
ggplot(data=dat1, aes(x=time, y=total_bill, fill=sex)) +
geom_bar(stat="identity", position=position_dodge())+
scale_fill_PR()+
theme_PR()
str(scale_fill_PR)
scale_color_PR <- function(...){
ggplot2::discrete_scale(
"colour","tuo",
scales::manual_pal(
values = c(
"264653","#fdb462","#7fc97f",
"#ef3b2c","#662506","#a6cee3",
"#fb9a99","#984ea3","#ffff33","#000099")),
...)
}
ggplot(data=dat1, aes(x=time, y=total_bill, fill=sex)) +
geom_bar(stat="identity", position=position_dodge())+
scale_fill_PR()+
theme_PR()
ggplot2::discrete_scale(
"colour","tuo",
scales::manual_pal(
values = c(
"#264653","#fdb462","#7fc97f",
"#ef3b2c","#662506","#a6cee3",
"#fb9a99","#984ea3","#ffff33","#000099")),
...)
scale_color_PR <- function(...){
ggplot2::discrete_scale(
"colour","tuo",
scales::manual_pal(
values = c(
"#264653","#fdb462","#7fc97f",
"#ef3b2c","#662506","#a6cee3",
"#fb9a99","#984ea3","#ffff33","#000099")),
...)
}
ggplot(data=dat1, aes(x=time, y=total_bill, fill=sex)) +
geom_bar(stat="identity", position=position_dodge())+
scale_fill_PR()+
theme_PR()
#Color palettes---------
scale_fill_PR <- function(...){
ggplot2::discrete_scale(
"fill","tuo",
scales::manual_pal(
values = c(
"#264653","#fdb462","#7fc97f",
"#ef3b2c","#662506","#a6cee3",
"#fb9a99","#984ea3","#ffff33", "#000099")),
...)
}
ggplot(data=dat1, aes(x=time, y=total_bill, fill=sex)) +
geom_bar(stat="identity", position=position_dodge())+
scale_fill_PR()+
theme_PR()
#Color palettes---------
scale_fill_PR <- function(...){
ggplot2::discrete_scale(
"fill","tuo",
scales::manual_pal(
values = c(
"#264653","#2a9d8f","#7fc97f",
"#ef3b2c","#662506","#a6cee3",
"#fb9a99","#984ea3","#ffff33", "#000099")),
...)
}
ggplot(data=dat1, aes(x=time, y=total_bill, fill=sex)) +
geom_bar(stat="identity", position=position_dodge())+
scale_fill_PR()+
theme_PR()
ggplot(data=dat1, aes(x=time, y=total_bill, fill=sex)) +
geom_bar(stat="identity", position=position_dodge())+
scale_fill_PR()
ggplot(data=dat1, aes(x=time, y=total_bill, fill=sex)) +
geom_bar(stat="identity", position=position_dodge())+
scale_fill_PR()+
theme(
rect = element_blank()
)
library(ggplot2)
library(showtext)
#Some data-------
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = 1:20 + rnorm(20,sd=3),
yvar = 1:20 + rnorm(20,sd=3))
ggplot2::discrete_scale(
"fill","tuo",
scales::manual_pal(
values = c(
"#264653","#2a9d8f","#7fc97f",
"#ef3b2c","#662506","#a6cee3",
"#fb9a99","#984ea3","#ffff33", "#000099")),
...)
#Color palettes---------
scale_fill_PR <- function(...){
ggplot2::discrete_scale(
"fill","tuo",
scales::manual_pal(
values = c(
"#264653","#2a9d8f","#7fc97f",
"#ef3b2c","#662506","#a6cee3",
"#fb9a99","#984ea3","#ffff33", "#000099")),
...)
}
scale_color_PR <- function(...){
ggplot2::discrete_scale(
"colour","tuo",
scales::manual_pal(
values = c(
"#264653","#fdb462","#7fc97f",
"#ef3b2c","#662506","#a6cee3",
"#fb9a99","#984ea3","#ffff33","#000099")),
...)
}
ggplot(data=dat1, aes(x=time, y=total_bill, fill=sex)) +
geom_bar(stat="identity", position=position_dodge())+
scale_fill_PR()+
theme(
rect = element_blank()
)
#Example to Fill data---------
dat1 <- data.frame(
sex = factor(c("Female","Female","Male","Male")),
time = factor(c("Lunch","Dinner","Lunch","Dinner"), levels=c("Lunch","Dinner")),
total_bill = c(13.53, 16.81, 16.24, 17.42)
)
ggplot(data=dat1, aes(x=time, y=total_bill, fill=sex)) +
geom_bar(stat="identity", position=position_dodge())+
scale_fill_PR()+
theme(
rect = element_blank()
)
ggplot(data=dat1, aes(x=time, y=total_bill, fill=sex)) +
geom_bar(stat="identity", position=position_dodge())+
#scale_fill_PR()+
theme(
rect = element_blank()
)
#Some data-------
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = 1:20 + rnorm(20,sd=3),
yvar = 1:20 + rnorm(20,sd=3))
#Plot testing
ggplot(dat, aes(x=xvar, y=yvar, color=cond)) +
geom_point(shape=1) +
scale_colour_hue(l=50) +
geom_smooth(method=lm,
se=FALSE,
fullrange=TRUE) +
scale_color_PR()+
theme_PR()
#Plot testing
ggplot(dat, aes(x=xvar, y=yvar, color=cond)) +
geom_point(shape=1) +
scale_colour_hue(l=50) +
geom_smooth(method=lm,
se=FALSE,
fullrange=TRUE) +
scale_color_PR()
ggplot(data=dat1, aes(x=time, y=total_bill, fill=sex)) +
geom_bar(stat="identity", position=position_dodge())+
#scale_fill_PR()+
theme(
rect = element_blank()
)
library(ggplot2)
library(datapasta)
# library(tidyverse)
# library(knitr)
# library(prettydoc)
# library(cowplot)
# library(ggthemes)
library(gapminder)
library(magrittr)
library(dplyr)
library(palmerpenguins)
# library(readxl)
# library(viridis)
# library(ggrepel)
# library(ggbeeswarm)
# library(titanic)
gapminder <- as.data.frame(gapminder::gapminder)
df_gp <- gapminder %>%
filter(continent == "Europe")
theme_set(theme_minimal()) # sets a default ggplot theme
df <- as_tibble(iris)
head(df)
names(df)
library(ggplot2)
library(datapasta)
# library(tidyverse)
# library(knitr)
# library(prettydoc)
# library(cowplot)
# library(ggthemes)
library(gapminder)
library(magrittr)
library(dplyr)
library(palmerpenguins)
# library(readxl)
# library(viridis)
# library(ggrepel)
# library(ggbeeswarm)
# library(titanic)
library(knitr)
library(prettydoc)
library(cowplot)
gapminder <- as.data.frame(gapminder::gapminder)
df_gp <- gapminder %>%
filter(continent == "Europe")
theme_set(theme_minimal()) # sets a default ggplot theme
p1 <- ggdraw() + draw_image("images/left_join1.png", scale = 0.9)
p2 <- ggdraw() + draw_image("images/left_join2.png", scale = 0.9)
plot_grid(p1, p2)
head(mtcars)
filter(mtcars, hp > 100)
#Use `desc(variablename)` to order the data frame in descending order
arrange (mtcars, hp) %>% slice(1:5)
str(mtcars)
filter(mtcars, hp > 100) %>% slice(1:5)
arrange (mtcars, hp) %>% slice(1:5)
arrange (mtcars, desc(hp)) %>% slice(1:5)
select(mtcars, mpg, hp) %>% slice(1:5)
select(mtcars, mpg:hp) %>% slice(1:5)
select(mtcars, -(mpg:hp)) %>% slice(1:5)
df <- select(mtcars, hp) #a subset of the data set
df %>% slice(1:5)
mutate(df,
kw = hp * 0.74570,
hp2 = kw * 1.34102
) %>% slice(1:5)
mutate(df,
kw = hp * 0.74570,
hp2 = kw * 1.34102,
hp_rounding = round(hp2, 1)
) %>% slice(1:5)
compare_group <- group_by(mtcars, am)
compare_group
compare_group <- group_by(mtcars, am)
summarise(compare_group, hp_mean = mean(hp))
mtcars %>%
group_by(am) %>%
summarise(
mean_hp = mean(hp)
)
library(ggplot2)
library(datapasta)
# library(tidyverse)
# library(knitr)
# library(prettydoc)
# library(cowplot)
# library(ggthemes)
library(gapminder)
library(magrittr)
library(dplyr)
library(palmerpenguins)
# library(readxl)
# library(viridis)
# library(ggrepel)
# library(ggbeeswarm)
# library(titanic)
library(knitr)
library(prettydoc)
library(cowplot)
gapminder <- as.data.frame(gapminder::gapminder)
df_gp <- gapminder %>%
filter(continent == "Europe")
theme_set(theme_minimal()) # sets a default ggplot theme
# A histogram with adjusted options
hist(mpg,
main="My title",
xlab="The x label",
col="darkgray",
freq=FALSE
)
cite(ggplot2)
citation("tidyr")
citation("dplyr")
citation("tidyverse")
citation("janitor")
citation("tibble")
citation("palmerpenguins")
citation("naniar")
citation("ggplot2")
confounder <- rnorm(1000, 10, 2)
confounder
income <- rnorm(1000, 2000, 500)
income
mean(income)
sample(income, 900)
mean(sample(income, 900))
mean(sample(income, 800))
set.seed(977) # this makes the simulation exactly reproducible
ni     = 100  # 100 people
nj     =  10  # 10 week study
id     = rep(1:ni, each=nj)
cond   = rep(c("control", "diet"), each=nj*(ni/2))
base   = round(rep(rnorm(ni, mean=250, sd=10), each=nj))
week   = rep(1:nj, times=ni)
y      = round(base + rnorm(ni*nj, mean=0, sd=1))
# MCAR
prop.m = .07  # 7% missingness
mcar   = runif(ni*nj, min=0, max=1)
y.mcar = ifelse(mcar<prop.m, NA, y)  # unrelated to anything
View(cbind(id, week, cond, base, y, y.mcar))
mcar_df <- data.frame(id, week, cond, base, y, y.mcar)
library(naniar)
ggplot(data = mcar_df,
aes(x = y,
y = y.mcar)) +
geom_miss_point()
library(ggplot2)
ggplot(data = mcar_df,
aes(x = y,
y = y.mcar)) +
geom_miss_point()
y.mar = matrix(y, ncol=nj, nrow=ni, byrow=TRUE)
for(i in 1:ni){
for(j in 4:nj){
dif1 = y.mar[i,j-2]-y.mar[i,j-3]
dif2 = y.mar[i,j-1]-y.mar[i,j-2]
if(dif1>0 & dif2>0){  # if weight goes up twice, drops out
y.mar[i,j:nj] = NA;  break
}
}
}
y.mar = as.vector(t(y.mar))
mar_df <- data.frame(id, week, cond, base, y, y.mar)
ggplot(data = mar_df,
aes(x = y,
y = y.mar)) +
geom_miss_point()
sort.y = sort(y, decreasing=TRUE)
nmar   = sort.y[ceiling(prop.m*length(y))]
y.nmar = ifelse(y>nmar, NA, y)  # doesn't show up when heavier
nmar_df <- data.frame(id, week, cond, base, y, y.nmar)
ggplot(data = nmar_df,
aes(x = y.nmar,
y = y)) +
geom_miss_point()
library(datapasta)
df <- tibble::tribble(
~ID, ~income, ~Education, ~Voting,
"Person 1",   2500L,     "High",      1L,
"Person 2",   1500L,      "Low",      0L,
"Person 3",   1761L,     "High",      1L,
"Person 4",   2322L,   "Medium",      0L
)
mean(df$income)
df <- tibble::tribble(
~id, ~income, ~education,     ~voting,
"Person 1",      NA,     "High",     "Voted",
"Person 2",      NA,      "Low", "Not-Voted",
"Person 3",   1761L,     "High",     "Voted",
"Person 4",   2322L,   "Medium", "Not-Voted"
)
mean(df$income)
mean(df$income, na.rm = TRUE)
library(tidyr)
library(ggalluvial)
titanic_wide_format <- data.frame(Titanic)
ggplot(data = titanic_wide_format,
aes(axis1 = Class, axis2 = Sex, axis3 = Age,
y = Freq)) +
geom_alluvium(aes(fill = Survived)) +
geom_stratum()
ggplot(data = titanic_wide_format,
aes(axis1 = Class, axis2 = Sex, axis3 = Age,
y = Freq)) +
geom_alluvium(aes(fill = Survived))
ggplot(data = titanic_wide_format,
aes(axis1 = Class, axis2 = Sex, axis3 = Age,
y = Freq)) +
geom_alluvium(aes(fill = Survived))+
geom_stratum()
titanic_wide_format
citation("ggalluvial")
print("ggalluvial",
bibtex=TRUE)
print(ggalluvial, bibtex=TRUE)
cite("ggplot2")
citation("dplyr")
citation("magrittr")
remove.packages("sf")
remove.packages("osmdata")
remove.packages("raster")
remove.packages("lwgeom")
devtools::install_github("edgar-treischl/PracticeR")
library(PracticeR)
practice_r("test")
devtools::install_github("edgar-treischl/PracticeR")
library(PracticeR)
practice("test")
remove.packages("PracticeR")
devtools::install_github("edgar-treischl/PracticeR")
library(PracticeR)
practice("preview")
remove.packages("PracticeR")
devtools::install_github("edgar-treischl/PracticeR")
library(PracticeR)
practice("preview")
library(PracticeR)
practice("preview")
practice_list()
practice_list()
detach("package:PracticeR", unload = TRUE)
install.packages("devtools")
library(devtools)
load_all()
check()
setwd("~/Dropbox/Programming/copycat/R")
load_all()
check()
